import nest_asyncio
nest_asyncio.apply()

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters
)
import asyncio

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
(
    LANG, MAIN_MENU,
    CALL_ROLE_MENU,
    MASTER_REPAIR_MENU,
    ADD_PERSON,
    ADD_PERSON_NAME,
    PROJECT_NAME,
    DETAIL_INPUT,
    WAIT_MASTER_CONFIRM
) = range(9)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7293478972:AAFvn2bWgxYbvSvAdAe7-jVVk1CpQMcIjco"

# –¢–µ–∫—Å—Ç–∏ –º–µ–Ω—é —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏
texts = {
    "uk": {
        "welcome": "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Wybierz jƒôzyk / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "main_menu": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        "call_help": "–í–∏–∫–ª–∏–∫–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É",
        "add_person": "–î–æ–¥–∞—Ç–∏ –ª—é–¥–∏–Ω—É",
        "done_project": "–í–∏–∫–æ–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç (–≤–ø–∏—Å–∞—Ç–∏ –Ω–∞–∑–≤—É)",
        "back": "‚¨Ö –ù–∞–∑–∞–¥",
        "main": "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        "language_selected": "–û–±—Ä–∞–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É.",
        "choose_role": "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å:",
        "call_sent": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: ",
        "enter_project_name": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:",
        "added_person": "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ª—é–¥–∏–Ω–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:",
        "enter_detail": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–µ—Ç–∞–ª—ñ —Ç–∞ —Ä–æ–∑–º—ñ—Ä (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º):",
        "master_repair_menu_text": "–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è —Ä–µ–º–æ–Ω—Ç—É:",
        "master_confirm_text": "–ú–∞–π—Å—Ç–µ—Ä {}: {} —Ö–æ—á–µ —Ä–µ–º–æ–Ω—Ç—É–≤–∞—Ç–∏ '{}'. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
        "master_confirm_button": "–ó—Ä–æ–∑—É–º—ñ–≤ - –ø—Ä–∏–Ω–µ—Å—ñ—Ç—å –≤–∏–±—Ä–∞–Ω—É —Ä—ñ—á —É –º–∞–π—Å—Ç–µ—Ä–Ω—é",
        "master_confirmed_user": "–ú–∞–π—Å—Ç–µ—Ä {} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤: –ø—Ä–∏–Ω–µ—Å—ñ—Ç—å '{}' —É –º–∞–π—Å—Ç–µ—Ä–Ω—é.",
        "role_added": "–î–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{}' –∑ —Ä–æ–ª–ª—é '{}'.",
        "choose_role_add": "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ—ó –ª—é–¥–∏–Ω–∏:",
        "unknown_command": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—è –º–µ–Ω—é.",
    },
    "pl": {
        "welcome": "Wybierz jƒôzyk / –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "main_menu": "Menu g≈Ç√≥wne:",
        "call_help": "Zawo≈Çaj pomoc",
        "add_person": "Dodaj osobƒô",
        "done_project": "Wykonany projekt (wpisz nazwƒô)",
        "back": "‚¨Ö Wstecz",
        "main": "üè† Menu g≈Ç√≥wne",
        "language_selected": "Wybrano jƒôzyk polski.",
        "choose_role": "Wybierz rolƒô:",
        "call_sent": "Wys≈Çano wiadomo≈õƒá: ",
        "enter_project_name": "Wpisz nazwƒô projektu:",
        "added_person": "Wpisz imiƒô osoby do dodania:",
        "enter_detail": "Wpisz nazwƒô czƒô≈õci i rozmiar (opcjonalnie):",
        "master_repair_menu_text": "Wybierz sprzƒôt do naprawy:",
        "master_confirm_text": "Mistrz {}: {} chce naprawiaƒá '{}'. Naci≈õnij przycisk potwierdzenia.",
        "master_confirm_button": "Zrozumia≈Çem - przynie≈õ wybranƒÖ rzecz do warsztatu",
        "master_confirmed_user": "Mistrz {} potwierdzi≈Ç: przynie≈õ '{}' do warsztatu.",
        "role_added": "Dodano u≈ºytkownika '{}' z rolƒÖ '{}'.",
        "choose_role_add": "Wybierz rolƒô dla nowej osoby:",
        "unknown_command": "Proszƒô korzystaƒá z menu.",
    },
    "ru": {
        "welcome": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Wybierz jƒôzyk / –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "call_help": "–í—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å",
        "add_person": "–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞",
        "done_project": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)",
        "back": "‚¨Ö –ù–∞–∑–∞–¥",
        "main": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "language_selected": "–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.",
        "choose_role": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        "call_sent": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ",
        "enter_project_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
        "added_person": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        "enter_detail": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä (–ø–æ –∂–µ–ª–∞–Ω–∏—é):",
        "master_repair_menu_text": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞:",
        "master_confirm_text": "–ú–∞—Å—Ç–µ—Ä {}: {} —Ö–æ—á–µ—Ç —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å '{}'. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "master_confirm_button": "–ü–æ–Ω—è–ª - –ø—Ä–∏–Ω–µ—Å–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—â—å –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é",
        "master_confirmed_user": "–ú–∞—Å—Ç–µ—Ä {} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: –ø—Ä–∏–Ω–µ—Å–∏—Ç–µ '{}' –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é.",
        "role_added": "–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' —Å —Ä–æ–ª—å—é '{}'.",
        "choose_role_add": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:",
        "unknown_command": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
    }
}

# –†–æ–ª—ñ —Ç–∞ —ó—Ö –∫–ª—é—á—ñ
roles = {
    "brigadier": {"name": {"uk": "–ë—Ä–∏–≥–∞–¥–∏—Ä", "pl": "Brygadzista", "ru": "–ë—Ä–∏–≥–∞–¥–∏—Ä"}},
    "repair_master_welding": {"name": {"uk": "–ú–∞–π—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç—É (–∑–≤–∞—Ä–∫–∞)", "pl": "Mistrz napraw (spawanie)", "ru": "–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ (—Å–≤–∞—Ä–∫–∞)"}},
    "repair_master_grinder": {"name": {"uk": "–ú–∞–π—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç—É (–±–æ–ª–≥–∞—Ä–∫–∞)", "pl": "Mistrz napraw (szlifierka)", "ru": "–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ (–±–æ–ª–≥–∞—Ä–∫–∞)"}},
    "repair_master_drill": {"name": {"uk": "–ú–∞–π—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç—É (–¥—Ä–µ–ª—å–∫–∞ –º–∞–≥–Ω—ñ—Ç–Ω–∞)", "pl": "Mistrz napraw (wiertarka magnetyczna)", "ru": "–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ (–¥—Ä–µ–ª—å–∫–∞ –º–∞–≥–Ω–∏—Ç–Ω–∞—è)"}},
    "repair_master_extender": {"name": {"uk": "–ú–∞–π—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç—É (–ø–æ–¥–æ–≤–∂—É–≤–∞—á)", "pl": "Mistrz napraw (przed≈Çu≈ºacz)", "ru": "–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞ (—É–¥–ª–∏–Ω–∏—Ç–µ–ª—å)"}},
    "metal_cutter": {"name": {"uk": "–†—ñ–∑—á–∏–∫ –º–µ—Ç–∞–ª—É", "pl": "Rze≈∫nik metalu", "ru": "–†–µ–∑—á–∏–∫ –º–µ—Ç–∞–ª–ª–∞"}},
    "office_worker": {"name": {"uk": "–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –æ—Ñ—ñ—Å—É", "pl": "Pracownik biura", "ru": "–†–∞–±–æ—Ç–Ω–∏–∫ –æ—Ñ–∏—Å–∞"}},
    "designer": {"name": {"uk": "–ü—Ä–æ–µ–∫—Ç–∞–Ω—Ç", "pl": "Projektant", "ru": "–ü—Ä–æ–µ–∫—Ç–∞–Ω—Ç"}},
    "laser_worker": {"name": {"uk": "–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –ª–∞–∑–µ—Ä–∞", "pl": "Operator lasera", "ru": "–†–∞–±–æ—Ç–Ω–∏–∫ –ª–∞–∑–µ—Ä–∞"}},
}

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ —Ä–æ–ª—è—Ö
users_by_role = {key: [] for key in roles.keys()}

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É
def get_text(user_data, key):
    lang = user_data.get("lang", "uk")
    return texts.get(lang, texts["uk"]).get(key, key)

def get_role_name(role_key, lang):
    return roles[role_key]["name"].get(lang, roles[role_key]["name"]["uk"])

# Start - –≤–∏–±—ñ—Ä –º–æ–≤–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data="lang_uk"),
            InlineKeyboardButton("Polski üáµüá±", callback_data="lang_pl"),
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru"),
        ]
    ]
    await update.message.reply_text(
        texts["uk"]["welcome"],
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return LANG

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang_code = query.data.split("_")[1]
    context.user_data["lang"] = lang_code

    await query.edit_message_text(get_text(context.user_data, "language_selected"))
    return await main_menu(update, context)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(get_text(context.user_data, "call_help"), callback_data="call_help")],
        [InlineKeyboardButton(get_text(context.user_data, "add_person"), callback_data="add_person")],
        [InlineKeyboardButton(get_text(context.user_data, "done_project"), callback_data="done_project")],
    ]
    if update.callback_query:
        await update.callback_query.edit_message_text(
            get_text(context.user_data, "main_menu"),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            get_text(context.user_data, "main_menu"),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    return MAIN_MENU

# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ –≤–∏–∫–ª–∏–∫—É –¥–æ–ø–æ–º–æ–≥–∏
async def call_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = []
    row = []
    lang = context.user_data.get("lang", "uk")

    # –í–∏–∫–ª—é—á–∞—î–º–æ –º–∞–π—Å—Ç—Ä—ñ–≤ —Ä–µ–º–æ–Ω—Ç—É, –±–æ –æ–∫—Ä–µ–º–æ –±—É–¥—É—Ç—å
    for i, (key, role) in enumerate(roles.items()):
        if key.startswith("repair_master"):
            continue
        row.append(InlineKeyboardButton(get_role_name(key, lang), callback_data=f"call_{key}"))
        if (i + 1) % 2 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    buttons.append([InlineKeyboardButton("–ú–∞–π—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç—É" if lang == "uk" else ("Mistrz napraw" if lang == "pl" else "–ú–∞—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç–∞"), callback_data="master_repair")])
    buttons.append([InlineKeyboardButton(get_text(context.user_data, "back"), callback_data="main")])

    await update.callback_query.edit_message_text(
        get_text(context.user_data, "choose_role"),
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return CALL_ROLE_MENU

# –ú–µ–Ω—é –º–∞–π—Å—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç—É (–ø—ñ–¥–º–µ–Ω—é)
async def master_repair_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "uk")
    keyboard = [
        [
            InlineKeyboardButton(get_role_name("repair_master_welding", lang), callback_data="call_repair_master_welding"),
            InlineKeyboardButton(get_role_name("repair_master_grinder", lang), callback_data="call_repair_master_grinder")
        ],
        [
            InlineKeyboardButton(get_role_name("repair_master_drill", lang), callback_data="call_repair_master_drill"),
            InlineKeyboardButton(get_role_name("repair_master_extender", lang), callback_data="call_repair_master_extender")
        ],
        [InlineKeyboardButton(get_text(context.user_data, "back"), callback_data="call_help")],
    ]
    await update.callback_query.edit_message_text(
        get_text(context.user_data, "master_repair_menu_text"),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MASTER_REPAIR_MENU

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ –≤–∏–∫–ª–∏–∫—É
async def handle_call_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ call_brigadier, call_repair_master_welding
    user_name = update.effective_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    lang = context.user_data.get("lang", "uk")

    if data == "master_repair":
        return await master_repair_menu(update, context)

    # –Ø–∫—â–æ —Ä–æ–ª—å - –º–∞–π—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç—É (–∑–≤–∞—Ä–∫–∞, –±–æ–ª–≥–∞—Ä–∫–∞, –¥—Ä–µ–ª—å–∫–∞, –ø–æ–¥–æ–≤–∂—É–≤–∞—á)
    if data.startswith("call_repair_master_"):
        # –ó–∞–ø–∏—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—ñ —â–æ —Ä–µ–º–æ–Ω—Ç—É–≤–∞—Ç–∏
        context.user_data["repair_type"] = data.replace("call_", "")
        await query.edit_message_text(get_text(context.user_data, "enter_detail"),
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text(context.user_data, "back"), callback_data="call_help")]]))
        return DETAIL_INPUT

    # –Ø–∫—â–æ —Ä–æ–ª—å - —Ä—ñ–∑—á–∏–∫ –º–µ—Ç–∞–ª—É - —Ç–µ–∂ –≤–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—ñ
    if data == "call_metal_cutter":
        await query.edit_message_text(get_text(context.user_data, "enter_detail"),
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text(context.user_data, "back"), callback_data="call_help")]]))
        return DETAIL_INPUT

    # –ó–≤–∏—á–∞–π–Ω–∏–π –≤–∏–∫–ª–∏–∫ —Ä–æ–ª—ñ - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –¥–æ–¥–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ —Ü—ñ—î—é —Ä–æ–ª–ª—é
    role_key = data.replace("call_", "")
    if role_key in roles:
        message = f"{user_name} –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–ø–æ–º–æ–≥–∏ —è–∫ {get_role_name(role_key, lang)}."
        # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Ü—ñ—î—ó —Ä–æ–ª—ñ
        recipients = users_by_role.get(role_key, [])
        if not recipients:
            await query.edit_message_text(get_text(context.user_data, "call_sent") + "(–Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ü—ñ—î—ó —Ä–æ–ª—ñ)")
        else:
            for user_id in recipients:
                try:
                    await context.bot.send_message(user_id, message)
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
            await query.edit_message_text(get_text(context.user_data, "call_sent") + message)
        return await main_menu(update, context)

    if data == "call_help":
        return await call_help_menu(update, context)
    if data == "main":
        return await main_menu(update, context)

    await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å.")
    return await main_menu(update, context)

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ä–µ–º–æ–Ω—Ç—É
async def detail_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_name = update.effective_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    lang = context.user_data.get("lang", "uk")

    repair_type = context.user_data.get("repair_type")
    if not repair_type:
        await update.message.reply_text(get_text(context.user_data, "unknown_command"))
        return await main_menu(update, context)

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—É —Ä–µ–º–æ–Ω—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ—Ö –º–∞–π—Å—Ç—Ä—ñ–≤ —Ä–µ–º–æ–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É
    masters_role = repair_type
    masters = users_by_role.get(masters_role, [])

    if not masters:
        await update.message.reply_text("–ù–µ–º–∞—î –º–∞–π—Å—Ç—Ä—ñ–≤ —Ä–µ–º–æ–Ω—Ç—É –¥–ª—è —Ü—ñ—î—ó —Ä–æ–ª—ñ.")
        return await main_menu(update, context)

    for master_id in masters:
        try:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(get_text(context.user_data, "master_confirm_button"), callback_data=f"master_confirm:{update.effective_user.id}:{text}")]
            ])
            await context.bot.send_message(
                master_id,
                texts[lang]["master_confirm_text"].format(get_role_name(masters_role, lang), user_name, text),
                reply_markup=keyboard
            )
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–∞–π—Å—Ç—Ä—É {master_id}: {e}")

    await update.message.reply_text(get_text(context.user_data, "call_sent") + f"–ó–∞–ø–∏—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç: {text}")
    return await main_menu(update, context)

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞–π—Å—Ç—Ä–∞ —Ä–µ–º–æ–Ω—Ç—É
async def master_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = context.user_data.get("lang", "uk")

    data = query.data  # —Ñ–æ—Ä–º–∞—Ç master_confirm:<user_id>:<item>
    parts = data.split(":")
    if len(parts) != 3:
        await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        return

    _, user_id_str, item = parts
    user_id = int(user_id_str)

    master_name = update.effective_user.first_name or "–ú–∞–π—Å—Ç–µ—Ä"
    role_of_master = None
    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å –º–∞–π—Å—Ç—Ä–∞ (–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∞ –∑ repair_master_*)
    for role_key, users in users_by_role.items():
        if update.effective_user.id in users:
            role_of_master = role_key
            break

    if not role_of_master:
        await query.edit_message_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –º–∞–π—Å—Ç–µ—Ä —Ä–µ–º–æ–Ω—Ç—É.")
        return

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ –º–∞–π—Å—Ç–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤
    try:
        await context.bot.send_message(
            user_id,
            texts[lang]["master_confirmed_user"].format(get_role_name(role_of_master, lang), item)
        )
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

    await query.edit_message_text("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    return

# –î–æ–¥–∞—Ç–∏ –ª—é–¥–∏–Ω—É - –≤–∏–±—ñ—Ä —Ä–æ–ª—ñ
async def add_person(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    lang = context.user_data.get("lang", "uk")
    keyboard = []
    row = []
    for i, (key, role) in enumerate(roles.items()):
        row.append(InlineKeyboardButton(get_role_name(key, lang), callback_data=f"addrole_{key}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(get_text(context.user_data, "back"), callback_data="main")])

    await update.callback_query.edit_message_text(
        get_text(context.user_data, "choose_role_add"),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADD_PERSON

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª—é–¥–∏–Ω–∏
async def add_person_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role_key = query.data.replace("addrole_", "")
    context.user_data["adding_role"] = role_key

    await query.edit_message_text(get_text(context.user_data, "added_person"))
    return ADD_PERSON_NAME

# –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –ª—é–¥–∏–Ω–∏
async def add_person_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    role_key = context.user_data.get("adding_role")
    lang = context.user_data.get("lang", "uk")
    user_id = update.effective_user.id

    if not role_key:
        await update.message.reply_text(get_text(context.user_data, "unknown_command"))
        return await main_menu(update, context)

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ä–æ–ª—ñ (—è–∫—â–æ —Ö–æ—á–µ—à –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ–Ω—à—ñ –¥–∞–Ω—ñ - —Ç—Ä–µ–±–∞ –±–∞–∑—É)
    if user_id not in users_by_role[role_key]:
        users_by_role[role_key].append(user_id)

    await update.message.reply_text(texts[lang]["role_added"].format(name, get_role_name(role_key, lang)))
    return await main_menu(update, context)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
async def done_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    lang = context.user_data.get("lang", "uk")

    await update.callback_query.edit_message_text(get_text(context.user_data, "enter_project_name"))
    return PROJECT_NAME

async def done_project_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    project_name = update.message.text.strip()
    lang = context.user_data.get("lang", "uk")
    user_name = update.effective_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"

    # –õ–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∏ –æ–±—Ä–æ–±–∫–∏ –Ω–∞–∑–≤–∏ –ø—Ä–æ–µ–∫—Ç—É —Ç—É—Ç...

    await update.message.reply_text(f"{get_text(context.user_data, 'call_sent')} {project_name}")
    return await main_menu(update, context)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥/–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await main_menu(update, context)

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "uk")
    await update.message.reply_text(get_text(context.user_data, "unknown_command"))


async def main():
    application = (
        ApplicationBuilder()
        .token(TOKEN)
        .build()
    )

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANG: [CallbackQueryHandler(choose_language, pattern="^lang_")],
            MAIN_MENU: [
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(add_person, pattern="^add_person$"),
                CallbackQueryHandler(done_project, pattern="^done_project$"),
                CallbackQueryHandler(main_menu, pattern="^main$"),
            ],
            CALL_ROLE_MENU: [
                CallbackQueryHandler(handle_call_role, pattern="^call_"),
                CallbackQueryHandler(master_repair_menu, pattern="^master_repair$"),
                CallbackQueryHandler(main_menu, pattern="^main$"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
            ],
            MASTER_REPAIR_MENU: [
                CallbackQueryHandler(handle_call_role, pattern="^call_repair_master_"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                CallbackQueryHandler(main_menu, pattern="^main$"),
            ],
            DETAIL_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, detail_input),
                           CallbackQueryHandler(call_help_menu, pattern="^call_help$"),
                           CallbackQueryHandler(main_menu, pattern="^main$")],
            ADD_PERSON: [CallbackQueryHandler(add_person_role, pattern="^addrole_"),
                         CallbackQueryHandler(main_menu, pattern="^main$")],
            ADD_PERSON_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_person_name_received)],
            PROJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, done_project_name_received)],
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False,
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(master_confirm, pattern="^master_confirm:"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
